{"docs":{"attributes":[{"code":"<button #butt >press me</button>","desc":"Shortcut to setting an elements id.","syntax":"#elementID","type":"IDs"},{"code":"<input ::submit placeholder=todo>","desc":"Shortcut to setting an elements input type.","syntax":"::inputType","type":"Types"},{"code":"<button .btn.blue >press me</button>\n<p .bold >hello there</p>","desc":"Shortcut to setting an elements class, can be chainable.","syntax":".classNane","type":"Classes"},{"code":"<button -border=none -color=white >hello</button>","desc":"Shortcut to setting an elements style.","syntax":"-style=val","type":"Styles"},{"code":"<button load=\"./path.html\" >press me</button>\n\n<!-- replace current state in history-->\n<button load:replace=\"./path.html\" >press me</button>\n\n<!--removes script tags-->\n<button load:sanitized=\"./path.html\">press me</button>\n\n<!--parse as markdown-->\n<button load:markdown=\"./path.html\">press me</button>","desc":"dynamically loads in a page, then writes it to the document.","syntax":"load=path","type":"Load"},{"code":"<!--normal object parsing-->\n<p format=user>hello {name} {surname}</p>\n\n<!--inject object itself as data-->\n<p format=count>counter is at {*}</p>\n\n<!--format as text-->\n<p format:text=count>{*}</p>\n\n<!--format as html-->\n<p format:html=count>{*}</p>\n\n<!--format as markdown-->\n<p format:markdown=count>{*}</p>\n\n<script>\n//set format data\napp.format(\"user\",{name:\"julia\",surname:\"doe\"})\napp.format(\"count\",0)\n\n//change format data\n//reactive\nsetInterval(()=>app.format(\"count\",\"++\"),500)\n</script>","desc":"Formats data into an element, reacts to data changes and rerenders. Formated data can also be edited (appending lists etc.)","syntax":"format=reference","type":"Format"},{"code":"<button on:click=alert>press me</button>\n<p on:click.prevent=alert> hi!! </p>\n<script>\n  app.on(\"alert\",function(event){\n    alert(this.innerText)\n  })\n</script>","desc":"Bind an event to a handler, passes the event object and the element itself.","syntax":"on:event=handler","type":"Events"}],"functions":[{"code":"app.id(\"input\").value=\"hello\"","desc":"Shortcut to getting an element by ID, alternative to document.getElementById() .","syntax":"app.id(\"elementID\")","type":"IDs"},{"code":"app.load(\"contacts.html\")","desc":"Dynamically loads in a page from an external source. Supports navigational keys to go back (does not allow going forward yet).","syntax":"app.load(\"path/to/page\")","type":"Load"},{"code":"<button on:click=alert>pop up</button>\n<script>\napp.on(\"alert\",function(){\n  alert(\"hello world\")\n  this.innerText=\"no more pop\"\n  app.off(\"alert\")\n})\n</script>","desc":"Adds or removes an event respectfully. Events can be shared, and pass the appropriate arguments when called, they are also bind to the element calling the event, which makes the handlers `this` the element.","syntax":"app.on(\"event\",handler)\napp.off(\"event\")","type":"Events"}],"manifest":[{"accent":"Sets the theme color of the app, this includes the navigational bar,status bar and ui accent. Defaults to #e91e63 .","console":"Sets the type of console to use. No default is set. Available variants are eruda and legacy.","desc":"Sets the title and webmanifest description of the app. Defaults to Spectre App.","icon":"Sets the favicon and webmanifest icons of the app. Defaults to /favicon.ico.","title":"Sets the title and webmanifest title of the app. Defaults to Spectre App."}],"ui":[{"classes":"silent, pill, outline, background, matte, block, shadow","syntax":"<button>hello</button>","type":"button"},{"classes":"silent, pill, outline, background, matte, block, shadow","syntax":"<button>hello</button>","type":"button"}]},"name":"SpectreJS","notes":"none","summary":"A <strong>Tiny</strong> and <strong>Powerful</strong> front-end javascript framework for building amazing web apps, fast!","version":"0.2.1"}